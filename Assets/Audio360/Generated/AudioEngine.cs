// Copyright (c) 2018-present, Facebook, Inc. 
// @generated
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TBE {

public class AudioEngine : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AudioEngine(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(AudioEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AudioEngine() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Audio360CSharpPINVOKE.delete_AudioEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual EngineError start() {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioEngine_start(swigCPtr);
    return ret;
  }

  public virtual EngineError suspend() {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioEngine_suspend(swigCPtr);
    return ret;
  }

  public virtual void setListenerRotation(TBVector forwardVector, TBVector upVector) {
    Audio360CSharpPINVOKE.AudioEngine_setListenerRotation__SWIG_0(swigCPtr, TBVector.getCPtr(forwardVector), TBVector.getCPtr(upVector));
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setListenerRotation(TBQuat quat) {
    Audio360CSharpPINVOKE.AudioEngine_setListenerRotation__SWIG_1(swigCPtr, TBQuat.getCPtr(quat));
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setListenerRotation(float yaw, float pitch, float roll) {
    Audio360CSharpPINVOKE.AudioEngine_setListenerRotation__SWIG_2(swigCPtr, yaw, pitch, roll);
  }

  public virtual void setListenerPosition(TBVector position) {
    Audio360CSharpPINVOKE.AudioEngine_setListenerPosition(swigCPtr, TBVector.getCPtr(position));
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual TBVector getListenerPosition() {
    TBVector ret = new TBVector(Audio360CSharpPINVOKE.AudioEngine_getListenerPosition(swigCPtr), true);
    return ret;
  }

  public virtual TBQuat getListenerRotation() {
    TBQuat ret = new TBQuat(Audio360CSharpPINVOKE.AudioEngine_getListenerRotation(swigCPtr), true);
    return ret;
  }

  public virtual TBVector getListenerForward() {
    TBVector ret = new TBVector(Audio360CSharpPINVOKE.AudioEngine_getListenerForward(swigCPtr), true);
    return ret;
  }

  public virtual TBVector getListenerUp() {
    TBVector ret = new TBVector(Audio360CSharpPINVOKE.AudioEngine_getListenerUp(swigCPtr), true);
    return ret;
  }

  public virtual EngineError enablePositionalTracking(bool enable, TBVector initialListenerPosition) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioEngine_enablePositionalTracking(swigCPtr, enable, TBVector.getCPtr(initialListenerPosition));
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool positionalTrackingEnabled() {
    bool ret = Audio360CSharpPINVOKE.AudioEngine_positionalTrackingEnabled(swigCPtr);
    return ret;
  }

  public virtual int getBufferSize() {
    int ret = Audio360CSharpPINVOKE.AudioEngine_getBufferSize(swigCPtr);
    return ret;
  }

  public virtual float getSampleRate() {
    float ret = Audio360CSharpPINVOKE.AudioEngine_getSampleRate(swigCPtr);
    return ret;
  }

  public virtual EngineError getAudioMix(float[] buffer, int numOfSamples, int numOfChannels) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioEngine_getAudioMix(swigCPtr, buffer, numOfSamples, numOfChannels);
    return ret;
  }

  public virtual void destroySpatDecoderQueue(NativeSpatDecoderQueue spatDecoder) {
    Audio360CSharpPINVOKE.AudioEngine_destroySpatDecoderQueue(swigCPtr, NativeSpatDecoderQueue.getCPtr(spatDecoder));
  }

  public virtual EngineError createSpatDecoderFile(NativeSpatDecoderFile spatDecoder, Options options) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioEngine_createSpatDecoderFile__SWIG_0(swigCPtr, NativeSpatDecoderFile.getCPtr(spatDecoder), (int)options);
    return ret;
  }

  public virtual void destroySpatDecoderFile(NativeSpatDecoderFile spatDecoder) {
    Audio360CSharpPINVOKE.AudioEngine_destroySpatDecoderFile(swigCPtr, NativeSpatDecoderFile.getCPtr(spatDecoder));
  }

  public virtual EngineError createAudioObject(NativeAudioObject audioObject, Options options) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioEngine_createAudioObject__SWIG_0(swigCPtr, NativeAudioObject.getCPtr(audioObject), (int)options);
    return ret;
  }

  public virtual void destroyAudioObject(NativeAudioObject audioObject) {
    Audio360CSharpPINVOKE.AudioEngine_destroyAudioObject(swigCPtr, NativeAudioObject.getCPtr(audioObject));
  }

  public virtual EngineError setEventCallback(EventCallback callback, global::System.IntPtr userData) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioEngine_setEventCallback(swigCPtr, callback, userData);
    return ret;
  }

  public virtual void enableTestTone(bool enable, float frequency, float gain) {
    Audio360CSharpPINVOKE.AudioEngine_enableTestTone__SWIG_0(swigCPtr, enable, frequency, gain);
  }

  public virtual void enableTestTone(bool enable, float frequency) {
    Audio360CSharpPINVOKE.AudioEngine_enableTestTone__SWIG_1(swigCPtr, enable, frequency);
  }

  public virtual void enableTestTone(bool enable) {
    Audio360CSharpPINVOKE.AudioEngine_enableTestTone__SWIG_2(swigCPtr, enable);
  }

  public virtual int getVersionMajor() {
    int ret = Audio360CSharpPINVOKE.AudioEngine_getVersionMajor(swigCPtr);
    return ret;
  }

  public virtual int getVersionMinor() {
    int ret = Audio360CSharpPINVOKE.AudioEngine_getVersionMinor(swigCPtr);
    return ret;
  }

  public virtual int getVersionPatch() {
    int ret = Audio360CSharpPINVOKE.AudioEngine_getVersionPatch(swigCPtr);
    return ret;
  }

  public virtual string getVersionHash() {
    string ret = Audio360CSharpPINVOKE.AudioEngine_getVersionHash(swigCPtr);
    return ret;
  }

  public virtual LoudnessStatistics getRenderedLoudness() {
    LoudnessStatistics ret = new LoudnessStatistics(Audio360CSharpPINVOKE.AudioEngine_getRenderedLoudness(swigCPtr), true);
    return ret;
  }

  public virtual void resetLoudness() {
    Audio360CSharpPINVOKE.AudioEngine_resetLoudness(swigCPtr);
  }

  public virtual void enableLoudness(bool enabled) {
    Audio360CSharpPINVOKE.AudioEngine_enableLoudness__SWIG_0(swigCPtr, enabled);
  }

  public virtual void enableLoudness() {
    Audio360CSharpPINVOKE.AudioEngine_enableLoudness__SWIG_1(swigCPtr);
  }

  public virtual long getDSPTime() {
    long ret = Audio360CSharpPINVOKE.AudioEngine_getDSPTime(swigCPtr);
    return ret;
  }

  public virtual EngineError setNumOutputBuffers(uint numOfBuffers) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.AudioEngine_setNumOutputBuffers(swigCPtr, numOfBuffers);
    return ret;
  }

  public virtual uint getNumOutputBuffers() {
    uint ret = Audio360CSharpPINVOKE.AudioEngine_getNumOutputBuffers(swigCPtr);
    return ret;
  }

  public virtual int getOutputLatencySamples() {
    int ret = Audio360CSharpPINVOKE.AudioEngine_getOutputLatencySamples(swigCPtr);
    return ret;
  }

  public virtual double getOutputLatencyMs() {
    double ret = Audio360CSharpPINVOKE.AudioEngine_getOutputLatencyMs(swigCPtr);
    return ret;
  }

  public virtual string getOutputAudioDeviceName() {
    string ret = Audio360CSharpPINVOKE.AudioEngine_getOutputAudioDeviceName(swigCPtr);
    return ret;
  }

  public static int getNumAudioDevices() {
    int ret = Audio360CSharpPINVOKE.AudioEngine_getNumAudioDevices();
    return ret;
  }

  public static string getAudioDeviceName(int index) {
    string ret = Audio360CSharpPINVOKE.AudioEngine_getAudioDeviceName(index);
    return ret;
  }

  public static string getAudioDeviceNameFromId(string id) {
    string ret = Audio360CSharpPINVOKE.AudioEngine_getAudioDeviceNameFromId(id);
    return ret;
  }

  public static AudioEngine create(EngineInitSettings initSettings) {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.AudioEngine_create__SWIG_0(EngineInitSettings.getCPtr(initSettings));
    AudioEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioEngine(cPtr, true);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AudioEngine create(float sampleRate) {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.AudioEngine_create__SWIG_1(sampleRate);
    AudioEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioEngine(cPtr, true);
    return ret;
  }

  public static AudioEngine create(float sampleRate, int bufferSize) {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.AudioEngine_create__SWIG_2(sampleRate, bufferSize);
    AudioEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioEngine(cPtr, false);
    return ret;
  }

  public static AudioEngine create(float sampleRate, int bufferSize, int queueSizeInSamples) {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.AudioEngine_create__SWIG_3(sampleRate, bufferSize, queueSizeInSamples);
    AudioEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioEngine(cPtr, false);
    return ret;
  }

  public NativeSpatDecoderQueue createSpatDecoderQueue() {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.AudioEngine_createSpatDecoderQueue(swigCPtr);
    NativeSpatDecoderQueue ret = (cPtr == global::System.IntPtr.Zero) ? null : new NativeSpatDecoderQueue(cPtr, false);
    return ret;
  }

  public NativeSpatDecoderFile createSpatDecoderFile() {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.AudioEngine_createSpatDecoderFile__SWIG_1(swigCPtr);
    NativeSpatDecoderFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new NativeSpatDecoderFile(cPtr, false);
    return ret;
  }

  public NativeAudioObject createAudioObject() {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.AudioEngine_createAudioObject__SWIG_1(swigCPtr);
    NativeAudioObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new NativeAudioObject(cPtr, false);
    return ret;
  }

}

}
