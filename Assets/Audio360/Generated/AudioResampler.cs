// Copyright (c) 2018-present, Facebook, Inc. 
// @generated
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TBE {

public class AudioResampler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AudioResampler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(AudioResampler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AudioResampler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Audio360CSharpPINVOKE.delete_AudioResampler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual uint process(float[] input, uint totalInputSamples, float[] output, uint totalOutputSamples, bool endOfStream) {
    uint ret = Audio360CSharpPINVOKE.AudioResampler_process(swigCPtr, input, totalInputSamples, output, totalOutputSamples, endOfStream);
    return ret;
  }

  public virtual int getNumChannels() {
    int ret = Audio360CSharpPINVOKE.AudioResampler_getNumChannels(swigCPtr);
    return ret;
  }

  public virtual float getInputSampleRate() {
    float ret = Audio360CSharpPINVOKE.AudioResampler_getInputSampleRate(swigCPtr);
    return ret;
  }

  public virtual float getOutputSampleRate() {
    float ret = Audio360CSharpPINVOKE.AudioResampler_getOutputSampleRate(swigCPtr);
    return ret;
  }

  public virtual AudioResampler.Quality getQuality() {
    AudioResampler.Quality ret = (AudioResampler.Quality)Audio360CSharpPINVOKE.AudioResampler_getQuality(swigCPtr);
    return ret;
  }

  public virtual void reset() {
    Audio360CSharpPINVOKE.AudioResampler_reset(swigCPtr);
  }

  public static AudioResampler create(uint numChannels, float inputSampleRate, float outputSampleRate, AudioResampler.Quality quality) {
    global::System.IntPtr cPtr = Audio360CSharpPINVOKE.AudioResampler_create(numChannels, inputSampleRate, outputSampleRate, (int)quality);
    AudioResampler ret = (cPtr == global::System.IntPtr.Zero) ? null : new AudioResampler(cPtr, true);
    return ret;
  }

  public enum Quality {
    OPTIMAL,
    FAST
  }

}

}
