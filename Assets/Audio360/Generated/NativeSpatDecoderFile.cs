// Copyright (c) 2018-present, Facebook, Inc. 
// @generated
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TBE {

public class NativeSpatDecoderFile : SpatDecoderInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal NativeSpatDecoderFile(global::System.IntPtr cPtr, bool cMemoryOwn) : base(Audio360CSharpPINVOKE.NativeSpatDecoderFile_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NativeSpatDecoderFile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual EngineError open(string nameAndPath, ChannelMap map) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.NativeSpatDecoderFile_open__SWIG_0(swigCPtr, nameAndPath, (int)map);
    return ret;
  }

  public virtual EngineError open(string nameAndPath) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.NativeSpatDecoderFile_open__SWIG_1(swigCPtr, nameAndPath);
    return ret;
  }

  public virtual EngineError open(string nameAndPath, AssetDescriptor ad, ChannelMap map) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.NativeSpatDecoderFile_open__SWIG_2(swigCPtr, nameAndPath, AssetDescriptor.getCPtr(ad), (int)map);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual EngineError open(string nameAndPath, AssetDescriptor ad) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.NativeSpatDecoderFile_open__SWIG_3(swigCPtr, nameAndPath, AssetDescriptor.getCPtr(ad));
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void close() {
    Audio360CSharpPINVOKE.NativeSpatDecoderFile_close(swigCPtr);
  }

  public virtual bool isOpen() {
    bool ret = Audio360CSharpPINVOKE.NativeSpatDecoderFile_isOpen(swigCPtr);
    return ret;
  }

  public virtual EngineError seekToSample(uint timeInSamples) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.NativeSpatDecoderFile_seekToSample(swigCPtr, timeInSamples);
    return ret;
  }

  public virtual EngineError seekToMs(float timeInMs) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.NativeSpatDecoderFile_seekToMs(swigCPtr, timeInMs);
    return ret;
  }

  public virtual uint getElapsedTimeInSamples() {
    uint ret = Audio360CSharpPINVOKE.NativeSpatDecoderFile_getElapsedTimeInSamples(swigCPtr);
    return ret;
  }

  public virtual double getElapsedTimeInMs() {
    double ret = Audio360CSharpPINVOKE.NativeSpatDecoderFile_getElapsedTimeInMs(swigCPtr);
    return ret;
  }

  public virtual uint getAssetDurationInSamples() {
    uint ret = Audio360CSharpPINVOKE.NativeSpatDecoderFile_getAssetDurationInSamples(swigCPtr);
    return ret;
  }

  public virtual float getAssetDurationInMs() {
    float ret = Audio360CSharpPINVOKE.NativeSpatDecoderFile_getAssetDurationInMs(swigCPtr);
    return ret;
  }

  public virtual void setSyncMode(SyncMode syncMode) {
    Audio360CSharpPINVOKE.NativeSpatDecoderFile_setSyncMode(swigCPtr, (int)syncMode);
  }

  public virtual SyncMode getSyncMode() {
    SyncMode ret = (SyncMode)Audio360CSharpPINVOKE.NativeSpatDecoderFile_getSyncMode(swigCPtr);
    return ret;
  }

  public virtual void setExternalClockInMs(double externalClockInMs) {
    Audio360CSharpPINVOKE.NativeSpatDecoderFile_setExternalClockInMs(swigCPtr, externalClockInMs);
  }

  public virtual void setFreewheelTimeInMs(double freewheelInMs) {
    Audio360CSharpPINVOKE.NativeSpatDecoderFile_setFreewheelTimeInMs(swigCPtr, freewheelInMs);
  }

  public virtual double getFreewheelTimeInMs() {
    double ret = Audio360CSharpPINVOKE.NativeSpatDecoderFile_getFreewheelTimeInMs(swigCPtr);
    return ret;
  }

  public virtual void setResyncThresholdMs(double resyncThresholdMs) {
    Audio360CSharpPINVOKE.NativeSpatDecoderFile_setResyncThresholdMs(swigCPtr, resyncThresholdMs);
  }

  public virtual double getResyncThresholdMs() {
    double ret = Audio360CSharpPINVOKE.NativeSpatDecoderFile_getResyncThresholdMs(swigCPtr);
    return ret;
  }

  public virtual void applyVolumeFade(float startLinearGain, float endLinearGain, float fadeDurationMs) {
    Audio360CSharpPINVOKE.NativeSpatDecoderFile_applyVolumeFade(swigCPtr, startLinearGain, endLinearGain, fadeDurationMs);
  }

  public virtual void enableLooping(bool shouldLoop) {
    Audio360CSharpPINVOKE.NativeSpatDecoderFile_enableLooping(swigCPtr, shouldLoop);
  }

  public virtual bool loopingEnabled() {
    bool ret = Audio360CSharpPINVOKE.NativeSpatDecoderFile_loopingEnabled(swigCPtr);
    return ret;
  }

}

}
