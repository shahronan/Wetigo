// Copyright (c) 2018-present, Facebook, Inc. 
// @generated
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TBE {

public class TBQuat : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TBQuat(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(TBQuat obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TBQuat() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Audio360CSharpPINVOKE.delete_TBQuat(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public float x {
    set {
      Audio360CSharpPINVOKE.TBQuat_x_set(swigCPtr, value);
    } 
    get {
      float ret = Audio360CSharpPINVOKE.TBQuat_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      Audio360CSharpPINVOKE.TBQuat_y_set(swigCPtr, value);
    } 
    get {
      float ret = Audio360CSharpPINVOKE.TBQuat_y_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      Audio360CSharpPINVOKE.TBQuat_z_set(swigCPtr, value);
    } 
    get {
      float ret = Audio360CSharpPINVOKE.TBQuat_z_get(swigCPtr);
      return ret;
    } 
  }

  public float w {
    set {
      Audio360CSharpPINVOKE.TBQuat_w_set(swigCPtr, value);
    } 
    get {
      float ret = Audio360CSharpPINVOKE.TBQuat_w_get(swigCPtr);
      return ret;
    } 
  }

  public TBQuat() : this(Audio360CSharpPINVOKE.new_TBQuat__SWIG_0(), true) {
  }

  public TBQuat(float xValue, float yValue, float zValue, float wValue) : this(Audio360CSharpPINVOKE.new_TBQuat__SWIG_1(xValue, yValue, zValue, wValue), true) {
  }

  public TBQuat(TBQuat quat) : this(Audio360CSharpPINVOKE.new_TBQuat__SWIG_2(TBQuat.getCPtr(quat)), true) {
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public string toString(int precision) {
    string ret = Audio360CSharpPINVOKE.TBQuat_toString__SWIG_0(swigCPtr, precision);
    return ret;
  }

  public string toString() {
    string ret = Audio360CSharpPINVOKE.TBQuat_toString__SWIG_1(swigCPtr);
    return ret;
  }

  public TBQuat invert() {
    TBQuat ret = new TBQuat(Audio360CSharpPINVOKE.TBQuat_invert(swigCPtr), true);
    return ret;
  }

  public static TBQuat convertFromOpenGLQuaternion(float x, float y, float z, float w) {
    TBQuat ret = new TBQuat(Audio360CSharpPINVOKE.TBQuat_convertFromOpenGLQuaternion(x, y, z, w), true);
    return ret;
  }

  public static TBQuat getQuatFromEulerAngles(float x_radians, float y_radians, float z_radians) {
    TBQuat ret = new TBQuat(Audio360CSharpPINVOKE.TBQuat_getQuatFromEulerAngles(x_radians, y_radians, z_radians), true);
    return ret;
  }

  public static TBVector getEulerAnglesFromQuat(TBQuat q) {
    TBVector ret = new TBVector(Audio360CSharpPINVOKE.TBQuat_getEulerAnglesFromQuat(TBQuat.getCPtr(q)), true);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TBQuat quatProductUnNormalised(TBQuat a, TBQuat b) {
    TBQuat ret = new TBQuat(Audio360CSharpPINVOKE.TBQuat_quatProductUnNormalised(TBQuat.getCPtr(a), TBQuat.getCPtr(b)), true);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TBVector rotateVectorByQuat(TBQuat quat, TBVector vector) {
    TBVector ret = new TBVector(Audio360CSharpPINVOKE.TBQuat_rotateVectorByQuat(TBQuat.getCPtr(quat), TBVector.getCPtr(vector)), true);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TBVector antiRotateVectorByQuat(TBQuat rotQuat, TBVector vector) {
    TBVector ret = new TBVector(Audio360CSharpPINVOKE.TBQuat_antiRotateVectorByQuat(TBQuat.getCPtr(rotQuat), TBVector.getCPtr(vector)), true);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TBQuat getFromToQuatRotation(TBVector fromVec, TBVector toVec) {
    TBQuat ret = new TBQuat(Audio360CSharpPINVOKE.TBQuat_getFromToQuatRotation(TBVector.getCPtr(fromVec), TBVector.getCPtr(toVec)), true);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TBVector getForwardFromQuat(TBQuat quat) {
    TBVector ret = new TBVector(Audio360CSharpPINVOKE.TBQuat_getForwardFromQuat(TBQuat.getCPtr(quat)), true);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TBVector getUpFromQuat(TBQuat quat) {
    TBVector ret = new TBVector(Audio360CSharpPINVOKE.TBQuat_getUpFromQuat(TBQuat.getCPtr(quat)), true);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TBVector getRightFromQuat(TBQuat quat) {
    TBVector ret = new TBVector(Audio360CSharpPINVOKE.TBQuat_getRightFromQuat(TBQuat.getCPtr(quat)), true);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TBQuat getQuatFromForwardAndUpVectors(TBVector forwardVector, TBVector upVector) {
    TBQuat ret = new TBQuat(Audio360CSharpPINVOKE.TBQuat_getQuatFromForwardAndUpVectors(TBVector.getCPtr(forwardVector), TBVector.getCPtr(upVector)), true);
    if (Audio360CSharpPINVOKE.SWIGPendingException.Pending) throw Audio360CSharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TBQuat getQuatFromMatrix(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) {
    TBQuat ret = new TBQuat(Audio360CSharpPINVOKE.TBQuat_getQuatFromMatrix(m00, m01, m02, m10, m11, m12, m20, m21, m22), true);
    return ret;
  }

  public static TBQuat identity() {
    TBQuat ret = new TBQuat(Audio360CSharpPINVOKE.TBQuat_identity(), true);
    return ret;
  }

  public void normalise() {
    Audio360CSharpPINVOKE.TBQuat_normalise(swigCPtr);
  }

  public static TBQuat generateRandomQuat() {
    TBQuat ret = new TBQuat(Audio360CSharpPINVOKE.TBQuat_generateRandomQuat(), true);
    return ret;
  }

}

}
