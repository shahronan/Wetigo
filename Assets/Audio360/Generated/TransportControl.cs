// Copyright (c) 2018-present, Facebook, Inc. 
// @generated
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TBE {

public class TransportControl : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TransportControl(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(TransportControl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual EngineError play() {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.TransportControl_play(swigCPtr);
    return ret;
  }

  public virtual EngineError playScheduled(float millisecondsFromNow) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.TransportControl_playScheduled(swigCPtr, millisecondsFromNow);
    return ret;
  }

  public virtual EngineError playWithFade(float fadeDurationInMs) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.TransportControl_playWithFade(swigCPtr, fadeDurationInMs);
    return ret;
  }

  public virtual EngineError pause() {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.TransportControl_pause(swigCPtr);
    return ret;
  }

  public virtual EngineError pauseScheduled(float millisecondsFromNow) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.TransportControl_pauseScheduled(swigCPtr, millisecondsFromNow);
    return ret;
  }

  public virtual EngineError pauseWithFade(float fadeDurationInMs) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.TransportControl_pauseWithFade(swigCPtr, fadeDurationInMs);
    return ret;
  }

  public virtual EngineError stop() {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.TransportControl_stop(swigCPtr);
    return ret;
  }

  public virtual EngineError stopScheduled(float millisecondsFromNow) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.TransportControl_stopScheduled(swigCPtr, millisecondsFromNow);
    return ret;
  }

  public virtual EngineError stopWithFade(float fadeDurationInMs) {
    EngineError ret = (EngineError)Audio360CSharpPINVOKE.TransportControl_stopWithFade(swigCPtr, fadeDurationInMs);
    return ret;
  }

  public virtual PlayState getPlayState() {
    PlayState ret = (PlayState)Audio360CSharpPINVOKE.TransportControl_getPlayState(swigCPtr);
    return ret;
  }

}

}
